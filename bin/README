Supercompute Rules

Objective: Reduce your opponent's fault tolerance to 0%.

Fault Tolerance
A player starts with a fault tolerance of 100%.  A player with a lower fault tolerance is more likely to have unpredictable events happen throughout the game.

Functions
Players begin with three random concealed functions in their function bag, which are taken from their function library.  Players may use any number of functions per turn as long as they provide the proper parameters.  When a function has finished, it moves to the back of its owner's degradation queue.  Once a turn, any function in your function bag can be queued for degradation (put in the back of the degradation queue) in exchange for instantiating a generic foundational unit of any type of specific basic resource that function takes as a parameter.

An example Function:

Subtraction--bb
Disrupt an amalgam or a player for 10.

Constructions
A Construction is a function type that instantiates and initializes an instance of some extension or standalone entity.

An example Construction:

Lactiferous Antennae--ee
4/10
s: Opponent plays with a random function from his function bag exposed.
v: When Lactiferous Antennae is initialized, your opponent exposes a random function from his function bag.  It remains exposed until it leaves his function bag.  If that function leaves his function bag, your opponent exposes a different function from his function bag at random.
Extraction: e

The text following "s:" provides a brief explanation of what the instantiation does.  The text following "v:" provides a verbose explanation.

Instances
Anything instantiated by a construction action is an instance.  Any semaphore is an instance.

Instance Attributes
Adhesion: When an instance has adhesion of a number less than one, it is destroyed and moves to the back of its controller's degradation queue.  If a standalone entity is disrupted for x, it loses x adhesion.  If an amalgam is disrupted for x, the player that controls that amalgam distributes x across any number of extensions. Each of those extensions loses an amount of adhesion ranging from x to 1 with losses summing to x.  In the example Construction above, an initialized Lactiferous Antennae begins with 10 adhesion.
Disruption: For an extension, disruption refers to the amount of disruption that extension contributes to its amalgam's overall disruption.  For an amalgam, disruption is a number representing how much an amalgam can disrupt a target during routine disruption.  In the example above, Lactiferous Antennae has disruption of 4.  If your opponent does not control any instances with adhesion of one or greater, you may disrupt your opponent directly.
Extraction: During the extraction phase, each instance with extraction increments the semaphores (resource controllers/distributors) of its controller by an amount corresponding to that instance's extraction details.  In the example above, Lactiferous Antennae gets extracted for an evo during each extraction phase, so its controller's evolute semaphore gets incremented by 1; if Lactiferous Antennae's extraction were instead ee, the evolute semaphore would be incremented by 2.

Foundational Unit
A foundational unit is an instance without adhesion that extensions are built off of.  You can instantiate a foundational unit once a turn by degrading a function in your function bag.

Semaphore
A resource counter.  There are three types: evolute, bitwise, and generic.  During the extraction phase, all your instances with extraction add resources to the semaphores that their extraction amounts correspond to.   Semaphores don't lose their resources at end of turn and can accumulate an unlimited amount of resource in them unless otherwise specified.

Faulting
For each decisive action a player makes, there is a set of faults that can occur based on the action he is taking.  Whether or not he faults during a given action is determined semi-randomly, with a lower fault tolerance being associated with a higher fault rate.  IE, a fault tolerance of 90% corresponds to a fault rate of 10%.

Before the game begins, players declare a concealed number and reveal it at the same time.  The player who reveals the higher number loses that much fault tolerance and takes the first turn.  If there is a tie, repeat this process.  If there is another tie after that, decide who goes first randomly.

Taking a turn:

Preparation
-add a random function from your function library to your function bag

Extraction
-extract value from all your extractable instances

Evaluation
-active player can use functions

Routine Disruption
-active player can use any of his amalgams to disrupt any other amalgam; each amalgam active player controls can only disrupt once
-if inactive player does not have any instances with adhesion greater than 0, you may disrupt that player directly

Evaluation
-active player can use functions

Finalization
-environment modifications that say "ends upon turn finalization" end
-the front item in the degradation queue gets degraded