Modular
----------------------------------------------------------------------------------------------------------------------------

Objective: Reduce your opponent’s fault tolerance to 0.

Fault Tolerance
A player starts with a fault tolerance of 100.  Certain events throughout the game have a higher probability of adversely affecting a player with a low fault-tolerance, so losing fault tolerance can cause a negative feedback loop.
//challenge will be to make the negative momentum for the less fault tolerant player surmountable

Parametric Actions
One-time use actions.  Players begin with three random concealed parametric actions in their action bag, which are taken from their action library.  Players may use any number of parametric actions per turn as long as they provide the proper parameters.  When a parametric action has finished, it moves to the back of the player’s degradation queue.  Once a turn, any parametric action of your choice can be queued for degradation(put in the back of the degradation unit) in exchange for instantiating a generic foundational unit of any type of specific basic resource that action takes as a parameter.
Functions: use parameters such as CPU power, genome
Constructions: initializes some data instance that has an adhesion number

Instance Attributes
Adhesion: if an object is disrupted for x, its top level extension loses x adhesion; if an extension has no adhesion, it falls off and moves to the back of the player’s degradation queue; at the end of the turn, an extension’s adhesion is refreshed.
Disruptive Capacity:   Disruptive capacity is a number representing how much an instance can disrupt a target during a routine disruption.  Unless stated otherwise, an instance can only use its disruptive capacity during one of the two routine disruption phases of its controller’s turn.  If an object is disrupted for x, its top-level extension loses x adhesion; if an extension has no remaining adhesion, it falls off whatever instance it was built upon.   By default, objects can be disrupted only at top-level.  Also by default, if an instance disrupts a target for x, and the target instance’s adhesion is less than x, the extraneous disruption has no effect.  However, if the disruptive instance has disruption cascade, the extraneous disruption disrupts the highest-level extension beneath the initial target of the disruption. If you have an instance with remaining disruptive capacity at the end of a Routine Disruption and there are no legal adhering targets, you may decrement a player’s fault tolerance by that much.
Nullness: A null instance will not have value extracted from it, cannot be disrupted by routine disruption unless it is the root instance(see “Disruptive Capacity” above) and cannot have any actions used; all abstractions on a higher level than it are also rendered null
Productivity: a productive instance is extracted by default during preparation.

Instances
Anything instantiated by a construction action is an instance.  Any abstraction and any semaphore is an instance. Any actions that are defined as instantiated are instances.  Null instances still count as instantiated.

The generic instance types
-evolute
-byte
//potentially more in the future

Semaphore: A resource counter.  For the sake of simplicity, there are currently only two types of semaphores, both basic: CPU power and genome.  Both are associated with the generic instances “evolute” and “byte”.  Semaphores don’t lose their resources at end of turn and can accumulate an unlimited amount unless otherwise specified.
//may have to limit the amount they can accumulate to encourage action

Before the game begins, players declare a concealed number and reveal it at the same time.  The player who reveals the higher number loses that much fault tolerance and takes the first turn.  If there is a tie, repeat this process.  If there is another tie after that, decide who goes first randomly.

Taking a turn:

Preparation
-add a random parametric action from your actions library to your action bag

Extraction
-extract value from all your productive instances; they yield x semaphoric value where x is the lowest-cost action on each of their top-level abstractions that .  Increment by a total of x any number of semaphores that provide resources that the extracted instance's parameters could take.
//Unlike Magic, actions can take place during this phase

Evaluation
-active player can use construction
-use functions for whatever their parameters
-use actions of objects

Routine Disruption
-use functions for whatever their parameters unless they say that they can't be used during routine disruption
-use actions of objects unless they say that they can't be used during routine disruption
-objects can disrupt for their disruption capacity
-at the end of routine disruption, extensions with no adhesion and all of their higher level classifications are put in the degradation unit

Evaluation and Routine Disruption
-use functions for whatever their parameters unless they can't be used during routine disruption
-use actions on objects
-objects can use disruption actions
-active player can use construction
-players can use actions of objects
-at the end of routine disruption, extensions with no adhesion and all of their higher level classifications are put in the degradation unit

Finalization
-environment modifications that say "ends upon turn finalization" end
-the front item in the degradation queue gets degraded

****Object Descriptions******

name:		evolute
base type:	generic
attributes:	
details:	You have a semaphore for genome.

name:		byte
base type:	generic
attributes:	
details:	You have a semaphore for cpu.

name:		
base type:	
attributes:	
details:	